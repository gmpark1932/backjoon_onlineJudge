#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <deque>
#include <cstring>

#define MAX_N 10
#define MAX_K 6
#define NOT_USE -1

using namespace std;

int height_array[MAX_N][MAX_N] = { 0 };

int memory[MAX_N][MAX_N][MAX_N][MAX_N][MAX_K];
// 현재 위치 2개 + 깎을 위치 2개 + 깎을 높이

pair<int, int> move_up = make_pair(-1, 0);
pair<int, int> move_down = make_pair(1, 0);
pair<int, int> move_left = make_pair(0, -1);
pair<int, int> move_right = make_pair(0, 1);

enum Direction { UP, DOWN, LEFT, RIGHT };

bool CanMove(pair<int, int> cur_point, Direction dir,int N) {
	bool result;
	pair<int, int> next_point = cur_point;

	

	switch (dir) {
	case UP: {
		next_point.first--;
		result = (cur_point.first > 0 && height_array[cur_point.first][cur_point.second] > height_array[next_point.first][next_point.second]);
	}break;
	case DOWN: {
		next_point.first++;
		result = (cur_point.first < N - 1 && height_array[cur_point.first][cur_point.second] > height_array[next_point.first][next_point.second]);
	}break;
	case LEFT: {
		next_point.second--;
		result = (cur_point.second > 0 && height_array[cur_point.first][cur_point.second] > height_array[next_point.first][next_point.second]);
	}break;
	case RIGHT: {
		next_point.second++;
		result = (cur_point.second < N - 1 && height_array[cur_point.first][cur_point.second] > height_array[next_point.first][next_point.second]);
	}break;
	}

	return result;
}

void Init(void) {
	memset(memory, 0xff, sizeof(memory));
	memset(height_array, 0x00, sizeof(height_array));
}

int FindLongestPath(pair<int, int> cur_point, pair<int, int> dig_point, int dig_height,int N) {
	if (memory[cur_point.first][cur_point.second][dig_point.first][dig_point.second][dig_height] != NOT_USE)
		return memory[cur_point.first][cur_point.second][dig_point.first][dig_point.second][dig_height];

	//cout << height_array[cur_point.first][cur_point.second] << ":" <<"(" << cur_point.first << " , " << cur_point.second << ")" << endl;
	//system("pause");

	int result = 0;
	pair<int, int> next_point = cur_point;
	if (CanMove(cur_point, UP, N) == true) {
		next_point = cur_point;
		next_point.first--;
		int temp_result = FindLongestPath(next_point, dig_point, dig_height, N) + 1;
		if (result < temp_result) result = temp_result;
	}

	if (CanMove(cur_point, DOWN, N) == true) {
		next_point = cur_point;
		next_point.first++;
		int temp_result = FindLongestPath(next_point, dig_point, dig_height, N) + 1;
		if (result < temp_result) result = temp_result;
	}

	if (CanMove(cur_point, LEFT, N) == true) {
		next_point = cur_point;
		next_point.second--;
		int temp_result = FindLongestPath(next_point, dig_point, dig_height, N) + 1;
		if (result < temp_result) result = temp_result;
	}

	if (CanMove(cur_point, RIGHT, N) == true) {
		next_point = cur_point;
		next_point.second++;
		int temp_result = FindLongestPath(next_point, dig_point, dig_height, N) + 1;
		if (result < temp_result) result = temp_result;
	}

	memory[cur_point.first][cur_point.second][dig_point.first][dig_point.second][dig_height] = result;

	return result;
}

int FindStartPoint(int N, vector<pair<int, int>> &start_array) {
	int h = 0;
	for (int i = 0; i<N; i++) {
		for (int j = 0; j<N; j++) {
			if (height_array[i][j] > h) h = height_array[i][j];
		}
	}

	int count = 0;
	for (int i = 0; i<N; i++) {
		for (int j = 0; j<N; j++) {
			if (height_array[i][j] == h) {
				start_array.push_back(make_pair(i, j));
				count++;
			}
		}
	}

	return count;
}

int Solution(int N, int K) {
	int result = 0;

	vector<pair<int, int>> start_array;
	int start_number = FindStartPoint(N, start_array);

	for (int c = 0; c < start_number; c++) {
		int temp_result = FindLongestPath(start_array[c], make_pair(0, 0), 0, N);
		if (temp_result > result) result = temp_result;
	}

	for (int i = 0; i<N; i++) {
		for (int j = 0; j<N; j++) {
			for (int k = 1; k <= K; k++) {
				height_array[i][j] -= k;
				for (int c = 0; c<start_number; c++) {
					int temp_result = FindLongestPath(start_array[c], make_pair(i, j), k,N);
					if (temp_result > result) result = temp_result;
				}
				height_array[i][j] += k;
			}
		}
	}

	return result;
}

int main(void) {
	int T, N, K;
	cin >> T;
	for (int t = 0; t < T; t++) {
		Init();
		cin >> N >> K;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				int c;
				cin >> c;
				height_array[i][j] = c;
			}
		}

		int result = Solution(N, K);

		cout << "#" << t+1 << " " << result+1 << endl;
	}

	return 0;
}
