#include <iostream>
#include <bitset>

using namespace std;

#define MAX_DESERT 101
#define MAX_N 21

typedef struct {
	int count;
	bool canInsert;
	bitset<MAX_DESERT> desert;
}MemNode;

MemNode g_memory_array[MAX_N][MAX_N][MAX_N][MAX_N];
int g_desert_array[MAX_N][MAX_N];

void initGlobalMemory(void) {
	memset(g_desert_array, 0, sizeof(g_desert_array));

	for(int i=0; i<MAX_N; i++) {
		for(int j=0; j<MAX_N; j++) {
			for(int k=0; k<MAX_N; k++) {
				for(int t=0; t<MAX_N; t++) {
					MemNode &target = g_memory_array[i][j][k][t];
					target.desert.reset();
					target.canInsert = true;
					target.count = 0;
				}
			}
		}
	}
}

void MakeGlobalMemoryArray(int N) {
	for(int i=0; i<N; i++) {
		for(int j=0; j<N; j++) {
			int desertVal = g_desert_array[i][j];

			for(int left_down = 0; i + left_down < N && j - left_down >= 0; left_down++) {
				for(int right_down = 0; i + right_down < N && j + right_down < N; right_down++) {
					pair<int, int> from_point ={ i + left_down + right_down , j - left_down + right_down };
					for(int right_up = left_down; from_point.first - right_up >= 0 && from_point.second + right_up < N; right_up++) {
						for(int left_up = right_down; from_point.first - left_up >= 0 && from_point.second - left_up >= 0; left_up++) {
							MemNode& target = g_memory_array[i][j][right_up][left_up];
							if(target.desert[desertVal] == 1) {
								target.canInsert = false;
							}
							else {
								target.count++;
								target.desert.set(desertVal);
							}
						}
					}
				}
			}
		}
	}
}

int FindMaxDesertPath(int N) {
	int max_count = 0;
	
	for(int i=0; i<N; i++) {
		for(int j=0; j<N; j++) {
			for(int k=1; k<N; k++) {
				for(int l=1; l<N; l++) {
					MemNode target = g_memory_array[i][j][k][l];
					if(target.canInsert == true && target.count > max_count) {
						max_count = target.count;
					}
				}
			}
		}
	}

	return max_count;
}

int main(void) {
	int T;
	cin >> T;
	for(int t=0; t<T; t++) {
		int N;
		cin >> N;

		initGlobalMemory();

		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				int c;
				cin >> c;
				g_desert_array[i][j] = c;
			}
		}

		MakeGlobalMemoryArray(N);

		int max_path = FindMaxDesertPath(N);
		if(max_path == 0) max_path = -1;

		cout << "#" << t+1 << " " << max_path << endl;
	}

	return 0;
}
